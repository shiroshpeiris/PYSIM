!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Converter_16_2Dyn  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     Pref, Qref, V_MV, RT_1, RT_2
      REAL     Zbase, Ltx, Wbase, Rtx, RT_3
      REAL     Ltx_m, Length, Rtx_m

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOF, IT_0                         ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOF     = NSTOF
      NSTOF     = NSTOF + 13
      INODE     = NNODE + 2
      NNODE     = NNODE + 47
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 54

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      Pref     = STOF(ISTOF + 1)
      Qref     = STOF(ISTOF + 2)
      V_MV     = STOF(ISTOF + 3)
      RT_1     = STOF(ISTOF + 4)
      RT_2     = STOF(ISTOF + 5)
      Zbase    = STOF(ISTOF + 6)
      Ltx      = STOF(ISTOF + 7)
      Wbase    = STOF(ISTOF + 8)
      Rtx      = STOF(ISTOF + 9)
      RT_3     = STOF(ISTOF + 10)
      Ltx_m    = STOF(ISTOF + 11)
      Length   = STOF(ISTOF + 12)
      Rtx_m    = STOF(ISTOF + 13)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 
      Pref = 0.52

! 20:[const] Real Constant 
      Qref = 0.3

! 30:[const] Real Constant 
      V_MV = 34.5

! 40:[const] Real Constant 
      Length = 1000.0

! 50:[const] Real Constant 
      Rtx_m = 0.000502

! 60:[const] Real Constant 
      Ltx_m = 0.000512

! 70:[const] Real Constant 
      Wbase = 376.991

! 80:[const] Real Constant 
      Zbase = 11.9025

! 90:[Converter_16_2]  
      CALL Converter_16_2Dyn(Pref, Qref, 1.0, V_MV, 1.0)


! 100:[Converter_16_2]  
      CALL Converter_16_2Dyn(Pref, Qref, 1.0, V_MV, 1.0)


! 110:[Converter_16_2]  
      CALL Converter_16_2Dyn(Pref, Qref, 1.0, V_MV, 1.0)


! 120:[Converter_16_2]  
      CALL Converter_16_2Dyn(Pref, Qref, 1.0, V_MV, 1.0)


! 130:[mult] Multiplier 
      RT_3 = Rtx_m * Length

! 140:[mult] Multiplier 
      Rtx = RT_3 * Zbase

! 150:[mult] Multiplier 
      RT_2 = Ltx_m * Length

! 160:[mult] Multiplier 
      RT_1 = RT_2 * Zbase

! 170:[div] Divider 
      IF (ABS(Wbase) .LT. 1.0E-100) THEN
         IF (Wbase .LT. 0.0)  THEN
            Ltx = -1.0E100 * RT_1
         ELSE
            Ltx =  1.0E100 * RT_1
         ENDIF
      ELSE
         Ltx = RT_1 / Wbase
      ENDIF

! 180:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,173485711)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+34), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+35), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+36), 0, Rtx, 0.0)

! 190:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,141228806)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+31), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+32), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+33), 0, Ltx, 0.0)

! 200:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,818668909)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+37), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+38), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+39), 0, Ltx, 0.0)

! 210:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1840405228)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+40), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+41), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+42), 0, Rtx, 0.0)

! 220:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,234520643)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+46), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+47), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+48), 0, Rtx, 0.0)

! 230:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,765607356)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+43), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+44), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+45), 0, Ltx, 0.0)

! 240:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,612597419)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+13), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+14), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+15), 0, Rtx, 0.0)

! 250:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1185565389)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+16), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+17), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+18), 0, Ltx, 0.0)

! 260:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,794016735)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+28), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+29), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+30), 0, Rtx, 0.0)

! 270:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1366376856)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+25), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+26), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+27), 0, Ltx, 0.0)

! 280:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,809450090)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+22), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+23), 0, Rtx, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+24), 0, Rtx, 0.0)

! 290:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,2036695542)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+19), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+20), 0, Ltx, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+21), 0, Ltx, 0.0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = Pref
      STOF(ISTOF + 2) = Qref
      STOF(ISTOF + 3) = V_MV
      STOF(ISTOF + 4) = RT_1
      STOF(ISTOF + 5) = RT_2
      STOF(ISTOF + 6) = Zbase
      STOF(ISTOF + 7) = Ltx
      STOF(ISTOF + 8) = Wbase
      STOF(ISTOF + 9) = Rtx
      STOF(ISTOF + 10) = RT_3
      STOF(ISTOF + 11) = Ltx_m
      STOF(ISTOF + 12) = Length
      STOF(ISTOF + 13) = Rtx_m


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Converter_16_2Out  ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_1(3), NT_2(3), NT_3(3), NT_4(3)

! Control Signals
      REAL     Pref, Qref, V_MV, Zbase, Wbase
      REAL     Ltx_m, Length, Rtx_m

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 47
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 54

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      Pref     = STOF(ISTOF + 1)
      Qref     = STOF(ISTOF + 2)
      V_MV     = STOF(ISTOF + 3)
      Zbase    = STOF(ISTOF + 6)
      Wbase    = STOF(ISTOF + 8)
      Ltx_m    = STOF(ISTOF + 11)
      Length   = STOF(ISTOF + 12)
      Rtx_m    = STOF(ISTOF + 13)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_1(IT_0) = NODE(INODE + 15 + IT_0)
         NT_2(IT_0) = NODE(INODE + 18 + IT_0)
         NT_3(IT_0) = NODE(INODE + 21 + IT_0)
         NT_4(IT_0) = NODE(INODE + 24 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 

      Pref = 0.52

! 20:[const] Real Constant 

      Qref = 0.3

! 30:[const] Real Constant 

      V_MV = 34.5

! 40:[const] Real Constant 

      Length = 1000.0

! 50:[const] Real Constant 

      Rtx_m = 0.000502

! 60:[const] Real Constant 

      Ltx_m = 0.000512

! 70:[const] Real Constant 

      Wbase = 376.991

! 80:[const] Real Constant 

      Zbase = 11.9025

! 90:[Converter_16_2]  
      CALL Converter_16_2Out()


! 100:[Converter_16_2]  
      CALL Converter_16_2Out()


! 110:[Converter_16_2]  
      CALL Converter_16_2Out()


! 120:[Converter_16_2]  
      CALL Converter_16_2Out()


! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (&
     &IBRCH(1)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,287439888,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (&
     &IBRCH(1)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,287439888,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_1(1), NT_1(2), NT_1(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,287439888,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,287439888,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,287439888,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (&
     &IBRCH(1)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,231976456,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (&
     &IBRCH(1)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,231976456,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_2(1), NT_2(2), NT_2(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,231976456,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,231976456,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,231976456,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1149171249,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1149171249,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_3(1), NT_3(2), NT_3(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1149171249,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1149171249,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1149171249,1,"hide2")
      ENDIF

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1061018523,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1061018523,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_4(1), NT_4(2), NT_4(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1061018523,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1061018523,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1061018523,1,"hide2")
      ENDIF

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = Pref
      STOF(ISTOF + 2) = Qref
      STOF(ISTOF + 3) = V_MV
      STOF(ISTOF + 6) = Zbase
      STOF(ISTOF + 8) = Wbase
      STOF(ISTOF + 11) = Ltx_m
      STOF(ISTOF + 12) = Length
      STOF(ISTOF + 13) = Rtx_m


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Converter_16_2Dyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     Pref, Qref, V_MV, Zbase, Wbase
      REAL     Ltx_m, Length, Rtx_m

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 47
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 54

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 
      Pref = 0.52

! 20:[const] Real Constant 
      Qref = 0.3

! 30:[const] Real Constant 
      V_MV = 34.5

! 40:[const] Real Constant 
      Length = 1000.0

! 50:[const] Real Constant 
      Rtx_m = 0.000502

! 60:[const] Real Constant 
      Ltx_m = 0.000512

! 70:[const] Real Constant 
      Wbase = 376.991

! 80:[const] Real Constant 
      Zbase = 11.9025

! 90:[Converter_16_2]  
      CALL Converter_16_2Dyn_Begin(1.0, V_MV)


! 100:[Converter_16_2]  
      CALL Converter_16_2Dyn_Begin(1.0, V_MV)


! 110:[Converter_16_2]  
      CALL Converter_16_2Dyn_Begin(1.0, V_MV)


! 120:[Converter_16_2]  
      CALL Converter_16_2Dyn_Begin(1.0, V_MV)


! 130:[mult] Multiplier 

! 140:[mult] Multiplier 

! 150:[mult] Multiplier 

! 160:[mult] Multiplier 

! 170:[div] Divider 

! 180:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+34), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+35), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+36), 0)

! 190:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+31), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+32), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+33), 0)

! 200:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+37), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+38), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+39), 0)

! 210:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+40), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+41), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+42), 0)

! 220:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+46), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+47), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+48), 0)

! 230:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+43), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+44), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+45), 0)

! 240:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+13), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+14), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+15), 0)

! 250:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+16), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+17), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+18), 0)

! 260:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+28), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+29), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+30), 0)

! 270:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+25), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+26), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+27), 0)

! 280:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+22), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+23), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+24), 0)

! 290:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+19), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+20), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+21), 0)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Converter_16_2Out_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     Pref, Qref, V_MV, Zbase, Wbase
      REAL     Ltx_m, Length, Rtx_m

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 47
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 54

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 
      Pref = 0.52

! 20:[const] Real Constant 
      Qref = 0.3

! 30:[const] Real Constant 
      V_MV = 34.5

! 40:[const] Real Constant 
      Length = 1000.0

! 50:[const] Real Constant 
      Rtx_m = 0.000502

! 60:[const] Real Constant 
      Ltx_m = 0.000512

! 70:[const] Real Constant 
      Wbase = 376.991

! 80:[const] Real Constant 
      Zbase = 11.9025

! 90:[Converter_16_2]  
      CALL Converter_16_2Out_Begin(1.0, V_MV)


! 100:[Converter_16_2]  
      CALL Converter_16_2Out_Begin(1.0, V_MV)


! 110:[Converter_16_2]  
      CALL Converter_16_2Out_Begin(1.0, V_MV)


! 120:[Converter_16_2]  
      CALL Converter_16_2Out_Begin(1.0, V_MV)


! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(200.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(200.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(34.5) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(34.5)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(200.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(200.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(34.5) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(34.5)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(200.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(200.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(34.5) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(34.5)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 1:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(200.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(200.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(34.5) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(34.5)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

      RETURN
      END

