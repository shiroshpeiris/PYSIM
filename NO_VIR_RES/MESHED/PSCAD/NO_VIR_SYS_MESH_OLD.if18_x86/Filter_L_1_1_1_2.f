!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Filter_L_1_1_1_2
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE Filter_L_1_1_1_2Dyn(Filter_Calc, Ldamp_in, Cfilter_in, &
     &   Cdamp_in, Rdamp_in, freq_cutoff, Lvsc)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Filter_Calc
      REAL,    INTENT(IN)  :: Ldamp_in
      REAL,    INTENT(IN)  :: Cfilter_in
      REAL,    INTENT(IN)  :: Cdamp_in, Rdamp_in
      REAL,    INTENT(IN)  :: freq_cutoff, Lvsc

! Electrical Node Indices

! Control Signals
      REAL     Cfilter, Ldamp, Cdamp, Rdamp, RT_1
      REAL     RT_2, Ldamp_Calc, Cdamp_Calc
      REAL     Rdamp_Calc, Cfilter_Calc, RT_3
      REAL     RT_4, RT_5, RT_6, RT_7, RT_8

! Internal Variables
      LOGICAL  LVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 1
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 22
      INODE     = NNODE + 2
      NNODE     = NNODE + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      Cfilter  = STOF(ISTOF + 7)
      Ldamp    = STOF(ISTOF + 8)
      Cdamp    = STOF(ISTOF + 9)
      Rdamp    = STOF(ISTOF + 10)
      RT_1     = STOF(ISTOF + 11)
      RT_2     = STOF(ISTOF + 12)
      Ldamp_Calc = STOF(ISTOF + 13)
      Cdamp_Calc = STOF(ISTOF + 14)
      Rdamp_Calc = STOF(ISTOF + 15)
      Cfilter_Calc = STOF(ISTOF + 16)
      RT_3     = STOF(ISTOF + 17)
      RT_4     = STOF(ISTOF + 18)
      RT_5     = STOF(ISTOF + 19)
      RT_6     = STOF(ISTOF + 20)
      RT_7     = STOF(ISTOF + 21)
      RT_8     = STOF(ISTOF + 22)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Filter_L_1_1_1_2.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 
      RT_4 = 1.0

! 90:[emtconst] Commonly Used Constants (pi...) 
      RT_8 = TWO_PI

! 100:[mult] Multiplier 
      RT_7 = RT_8 * freq_cutoff

! 110:[square] Square 
      RT_6 = RT_7 * RT_7

! 120:[mult] Multiplier 
      RT_5 = RT_6 * Lvsc

! 130:[gain] Gain Block 
!  Gain
      Ldamp_Calc = 5.0 * Lvsc

! 140:[select] Two Input Selector 
      IF (Filter_Calc .EQ. RTCI(NRTCI)) THEN
         Ldamp = Ldamp_in
      ELSE
         Ldamp = Ldamp_Calc
      ENDIF
      NRTCI = NRTCI + 1
!

! 150:[div] Divider 
      IF (ABS(RT_5) .LT. 1.0E-100) THEN
         IF (RT_5 .LT. 0.0)  THEN
            RT_3 = -1.0E100 * RT_4
         ELSE
            RT_3 =  1.0E100 * RT_4
         ENDIF
      ELSE
         RT_3 = RT_4 / RT_5
      ENDIF

! 160:[gain] Gain Block 
!  Gain
      Cfilter_Calc = 1000000.0 * RT_3

! 170:[gain] Gain Block 
!  Gain
      Cdamp_Calc = 0.5 * Cfilter_Calc

! 180:[div] Divider 
      IF (ABS(Cdamp_Calc) .LT. 1.0E-100) THEN
         IF (Cdamp_Calc .LT. 0.0)  THEN
            RT_2 = -1.0E100 * Ldamp_Calc
         ELSE
            RT_2 =  1.0E100 * Ldamp_Calc
         ENDIF
      ELSE
         RT_2 = Ldamp_Calc / Cdamp_Calc
      ENDIF

! 190:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_2 .LT. 0.0) THEN
        RT_1 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,2086120153,1,2,"A negative value i&
     &s detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,2086120153,1,-1,"Input is treated &
     &as 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_1 = SQRT(RT_2)
      ENDIF
      NSTORL = NSTORL + 1

! 200:[gain] Gain Block 
!  Gain
      Rdamp_Calc = 1000.0 * RT_1

! 210:[select] Two Input Selector 
      IF (Filter_Calc .EQ. RTCI(NRTCI)) THEN
         Rdamp = Rdamp_in
      ELSE
         Rdamp = Rdamp_Calc
      ENDIF
      NRTCI = NRTCI + 1
!

! 220:[select] Two Input Selector 
      IF (Filter_Calc .EQ. RTCI(NRTCI)) THEN
         Cdamp = Cdamp_in
      ELSE
         Cdamp = Cdamp_Calc
      ENDIF
      NRTCI = NRTCI + 1
!

! 230:[select] Two Input Selector 
      IF (Filter_Calc .EQ. RTCI(NRTCI)) THEN
         Cfilter = Cfilter_in
      ELSE
         Cfilter = Cfilter_Calc
      ENDIF
      NRTCI = NRTCI + 1
!

! 240:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1936050751)
      CALL E_VARRLC1_EXE(2 ,SS(1) ,  (IBRCH(1)+7), 0, Cdamp, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS(1) ,  (IBRCH(1)+8), 0, Cdamp, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS(1) ,  (IBRCH(1)+9), 0, Cdamp, 0.0)

! 250:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,619402029)
      CALL E_VARRLC1_EXE(2 ,SS(1) ,  (IBRCH(1)+10), 0, Cfilter, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS(1) ,  (IBRCH(1)+11), 0, Cfilter, 0.0)
      CALL E_VARRLC1_EXE(2 ,SS(1) ,  (IBRCH(1)+12), 0, Cfilter, 0.0)

! 260:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,826049685)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+4), 0, Rdamp, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+5), 0, Rdamp, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+6), 0, Rdamp, 0.0)

! 270:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,205008340)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+1), 0, Ldamp, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+2), 0, Ldamp, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+3), 0, Ldamp, 0.0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 1) = Filter_Calc
      STOF(ISTOF + 1) = Ldamp_in
      STOF(ISTOF + 2) = Cfilter_in
      STOF(ISTOF + 3) = Cdamp_in
      STOF(ISTOF + 4) = Rdamp_in
      STOF(ISTOF + 5) = freq_cutoff
      STOF(ISTOF + 6) = Lvsc
      STOF(ISTOF + 7) = Cfilter
      STOF(ISTOF + 8) = Ldamp
      STOF(ISTOF + 9) = Cdamp
      STOF(ISTOF + 10) = Rdamp
      STOF(ISTOF + 11) = RT_1
      STOF(ISTOF + 12) = RT_2
      STOF(ISTOF + 13) = Ldamp_Calc
      STOF(ISTOF + 14) = Cdamp_Calc
      STOF(ISTOF + 15) = Rdamp_Calc
      STOF(ISTOF + 16) = Cfilter_Calc
      STOF(ISTOF + 17) = RT_3
      STOF(ISTOF + 18) = RT_4
      STOF(ISTOF + 19) = RT_5
      STOF(ISTOF + 20) = RT_6
      STOF(ISTOF + 21) = RT_7
      STOF(ISTOF + 22) = RT_8


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Filter_L_1_1_1_2Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_8

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_4     = STOF(ISTOF + 18)
      RT_8     = STOF(ISTOF + 22)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Filter_L_1_1_1_2.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 

      RT_4 = 1.0

! 90:[emtconst] Commonly Used Constants (pi...) 
      RT_8 = TWO_PI

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 18) = RT_4
      STOF(ISTOF + 22) = RT_8


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Filter_L_1_1_1_2Dyn_Begin(Ldamp_in, Cfilter_in,        &
     &   Cdamp_in, Rdamp_in)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Ldamp_in
      REAL,    INTENT(IN)  :: Cfilter_in
      REAL,    INTENT(IN)  :: Cdamp_in, Rdamp_in

! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_8

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 
      RT_4 = 1.0

! 90:[emtconst] Commonly Used Constants (pi...) 
      RT_8 = TWO_PI

! 100:[mult] Multiplier 

! 110:[square] Square 

! 120:[mult] Multiplier 

! 130:[gain] Gain Block 

! 140:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 150:[div] Divider 

! 160:[gain] Gain Block 

! 170:[gain] Gain Block 

! 180:[div] Divider 

! 190:[sqrt] Square Root 

! 200:[gain] Gain Block 

! 210:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 220:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 230:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 240:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(2 ,SS(1) ,  (IBRCH(1)+7), 0)
      CALL E_VARRLC1_CFG(2 ,SS(1) ,  (IBRCH(1)+8), 0)
      CALL E_VARRLC1_CFG(2 ,SS(1) ,  (IBRCH(1)+9), 0)

! 250:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(2 ,SS(1) ,  (IBRCH(1)+10), 0)
      CALL E_VARRLC1_CFG(2 ,SS(1) ,  (IBRCH(1)+11), 0)
      CALL E_VARRLC1_CFG(2 ,SS(1) ,  (IBRCH(1)+12), 0)

! 260:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+4), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+5), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+6), 0)

! 270:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+1), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+2), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+3), 0)

      RETURN
      END

!=======================================================================

      SUBROUTINE Filter_L_1_1_1_2Out_Begin(Ldamp_in, Cfilter_in,        &
     &   Cdamp_in, Rdamp_in)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Ldamp_in
      REAL,    INTENT(IN)  :: Cfilter_in
      REAL,    INTENT(IN)  :: Cdamp_in, Rdamp_in

! Electrical Node Indices

! Control Signals
      REAL     RT_4, RT_8

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 
      RT_4 = 1.0

! 90:[emtconst] Commonly Used Constants (pi...) 
      RT_8 = TWO_PI

      RETURN
      END

