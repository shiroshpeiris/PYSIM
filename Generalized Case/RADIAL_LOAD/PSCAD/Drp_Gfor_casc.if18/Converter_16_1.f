!=======================================================================
! Generated by: PSCAD v5.0.0.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Converter_16_1
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE Converter_16_1Dyn(Pref, Qref, UN, V_HV)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Filter_L_1_1_1_1Dyn  ! 
!     SUBR    PQ_control_10_1Dyn  ! 
!     SUBR    VF_Control_7_1Dyn  ! 
      REAL    EMTDC_XINT    ! 'Integrator /w Interpolation'
      REAL    LIMIT         ! Hard Limiter
!     SUBR    Converter_15_1Dyn  ! 
!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Pref, Qref, UN
      REAL,    INTENT(IN)  :: V_HV

! Electrical Node Indices
      INTEGER  NT_9(3), NT_10(3)

! Control Signals
      REAL     Vref_dq(3), UFqref, Wint, Qdq, Pdc
      REAL     RT_1, RT_2, RT_3, RT_4, Iinv(3)
      REAL     Pmeas, Qmeas, RT_5(3), Fmeas, RT_6
      REAL     RT_7, RT_8, RT_9, RT_10, RT_11
      REAL     Qcontrol, RT_12, RT_13, RT_14
      REAL     RT_15, RT_16, RT_17, VRMS, VRMSF
      REAL     L_Load, R_Load, RT_18(3), Vpcc, Pg
      REAL     Ig, Qg, Pref_, Wref, RT_19, Wsys
      REAL     RT_20, Igrid(3), IRMS, RT_21
      REAL     RT_22, RT_23, RT_24, A, B, K, E0
      REAL     RT_25, RT_26, SOC_inv, RT_27
      REAL     RT_28, SOC, Q, Rload, RT_29, RT_30
      REAL     RT_31, RT_32, Pdq, RT_33, RT_34
      REAL     RT_35, E, RT_36, RT_37, RT_38
      REAL     RT_39, Ibatt_A, RT_40, RT_41, Va
      REAL     Vb, Vc, Vgrid(3), Qref_, V33(3)
      REAL     PG_, QG_, Vrms_bus_pu

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, Hma_n_1, Hmb_n_1, Hmc_n_1
      REAL     Hka_n_1, Hkb_n_1, Hkc_n_1, Hma_n
      REAL     Hmb_n, Hmc_n, Hka_n, Hkb_n, Hkc_n
      REAL     Yc, Ycm, RVD2_1(2), RVD2_2(2)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOF, IT_0                         ! Storage Indices
      INTEGER ICX, IPGB                           ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOF     = NSTOF
      NSTOF     = NSTOF + 102
      IPGB      = NPGB
      NPGB      = NPGB + 26
      ICX       = NCX
      NCX       = NCX + 12
      INODE     = NNODE + 2
      NNODE     = NNODE + 28
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 29

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      UFqref   = STOF(ISTOF + 8)
      Wint     = STOF(ISTOF + 9)
      Qdq      = STOF(ISTOF + 10)
      Pdc      = STOF(ISTOF + 11)
      RT_1     = STOF(ISTOF + 12)
      RT_2     = STOF(ISTOF + 13)
      RT_3     = STOF(ISTOF + 14)
      RT_4     = STOF(ISTOF + 15)
      Pmeas    = STOF(ISTOF + 19)
      Qmeas    = STOF(ISTOF + 20)
      Fmeas    = STOF(ISTOF + 24)
      RT_6     = STOF(ISTOF + 25)
      RT_7     = STOF(ISTOF + 26)
      RT_8     = STOF(ISTOF + 27)
      RT_9     = STOF(ISTOF + 28)
      RT_10    = STOF(ISTOF + 29)
      RT_11    = STOF(ISTOF + 30)
      Qcontrol = STOF(ISTOF + 31)
      RT_12    = STOF(ISTOF + 32)
      RT_13    = STOF(ISTOF + 33)
      RT_14    = STOF(ISTOF + 34)
      RT_15    = STOF(ISTOF + 35)
      RT_16    = STOF(ISTOF + 36)
      RT_17    = STOF(ISTOF + 37)
      VRMS     = STOF(ISTOF + 38)
      VRMSF    = STOF(ISTOF + 39)
      L_Load   = STOF(ISTOF + 40)
      R_Load   = STOF(ISTOF + 41)
      Vpcc     = STOF(ISTOF + 45)
      Pg       = STOF(ISTOF + 46)
      Ig       = STOF(ISTOF + 47)
      Qg       = STOF(ISTOF + 48)
      Pref_    = STOF(ISTOF + 49)
      Wref     = STOF(ISTOF + 50)
      RT_19    = STOF(ISTOF + 51)
      Wsys     = STOF(ISTOF + 52)
      RT_20    = STOF(ISTOF + 53)
      IRMS     = STOF(ISTOF + 57)
      RT_21    = STOF(ISTOF + 58)
      RT_22    = STOF(ISTOF + 59)
      RT_23    = STOF(ISTOF + 60)
      RT_24    = STOF(ISTOF + 61)
      A        = STOF(ISTOF + 62)
      B        = STOF(ISTOF + 63)
      K        = STOF(ISTOF + 64)
      E0       = STOF(ISTOF + 65)
      RT_25    = STOF(ISTOF + 66)
      RT_26    = STOF(ISTOF + 67)
      SOC_inv  = STOF(ISTOF + 68)
      RT_27    = STOF(ISTOF + 69)
      RT_28    = STOF(ISTOF + 70)
      SOC      = STOF(ISTOF + 71)
      Q        = STOF(ISTOF + 72)
      Rload    = STOF(ISTOF + 73)
      RT_29    = STOF(ISTOF + 74)
      RT_30    = STOF(ISTOF + 75)
      RT_31    = STOF(ISTOF + 76)
      RT_32    = STOF(ISTOF + 77)
      Pdq      = STOF(ISTOF + 78)
      RT_33    = STOF(ISTOF + 79)
      RT_34    = STOF(ISTOF + 80)
      RT_35    = STOF(ISTOF + 81)
      E        = STOF(ISTOF + 82)
      RT_36    = STOF(ISTOF + 83)
      RT_37    = STOF(ISTOF + 84)
      RT_38    = STOF(ISTOF + 85)
      RT_39    = STOF(ISTOF + 86)
      Ibatt_A  = STOF(ISTOF + 87)
      RT_40    = STOF(ISTOF + 88)
      RT_41    = STOF(ISTOF + 89)
      Va       = STOF(ISTOF + 90)
      Vb       = STOF(ISTOF + 91)
      Vc       = STOF(ISTOF + 92)
      Qref_    = STOF(ISTOF + 96)
      PG_      = STOF(ISTOF + 100)
      QG_      = STOF(ISTOF + 101)
      Vrms_bus_pu = STOF(ISTOF + 102)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Vref_dq(IT_0) = STOF(ISTOF + 4 + IT_0)
         Iinv(IT_0) = STOF(ISTOF + 15 + IT_0)
         RT_5(IT_0) = STOF(ISTOF + 20 + IT_0)
         RT_18(IT_0) = STOF(ISTOF + 41 + IT_0)
         Igrid(IT_0) = STOF(ISTOF + 53 + IT_0)
         Vgrid(IT_0) = STOF(ISTOF + 92 + IT_0)
         V33(IT_0) = STOF(ISTOF + 96 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_9(IT_0) = NODE(INODE + 20 + IT_0)
         NT_10(IT_0) = NODE(INODE + 23 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Converter_16_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[var] Variable Input Slider 'KPg'
      Pg = CX(CXMAP(ICX+1))

! 30:[var] Variable Input Slider 'Pref'
      Pref_ = CX(CXMAP(ICX+2))

! 40:[var] Variable Input Slider 'KQg'
      Qg = CX(CXMAP(ICX+3))

! 50:[var] Variable Input Slider 'Qref'
      Qref_ = CX(CXMAP(ICX+4))

! 60:[const] Real Constant 
      RT_13 = 0.0

! 70:[var] Variable Input Slider 'KIg'
      Ig = CX(CXMAP(ICX+5))

! 80:[const] Real Constant 
      RT_12 = 0.5

! 90:[var] Variable Input Slider 'Wref'
      Wref = CX(CXMAP(ICX+6))

! 100:[time-sig] Output of Simulation Time 
      RT_14 = TIME

! 110:[const] Real Constant 
      RT_15 = 2.0

! 120:[var] Variable Input Slider 'Vpcc'
      Vpcc = CX(CXMAP(ICX+7))

! 130:[var_switch] Two State Switch 'Qcontrol'
      Qcontrol = CX(CXMAP(ICX+8))

! 140:[var] Variable Input Slider 'R_Load'
      R_Load = CX(CXMAP(ICX+9))

! 150:[emtconst] Commonly Used Constants (pi...) 
      RT_20 = TWO_PI

! 160:[var] Variable Input Slider 'L_Load'
      L_Load = CX(CXMAP(ICX+10))

! 170:[const] Real Constant 
      RT_36 = 185.334

! 180:[const] Real Constant 
      RT_38 = 1000.0

! 190:[const] Real Constant 
      RT_40 = 2000000.0

! 200:[const] Real Constant 
      RT_4 = 20.0

! 210:[const] Real Constant 
      RT_33 = 2000000.0

! 220:[emtconst] Commonly Used Constants (pi...) 
      RT_7 = TWO_PI

! 230:[const] Real Constant 
      RT_30 = 185.334

! 240:[const] Real Constant 
      RT_34 = 1000.0

! 300:[const] Real Constant 
      RT_3 = 5.0

! 310:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 1),(IXFMR + 2),(IXFMR + 3), (IBRCH(1)+19),&
     & (IBRCH(1)+20), (IBRCH(1)+21), (IBRCH(1)+22), (IBRCH(1)+23), (IBRC&
     &H(1)+24),0,0,0,0,0,0,SS(1),0,1.0,0)

! 330:[var_switch] Two State Switch 'Constant VF control'
      RT_1 = CX(CXMAP(ICX+11))

! 340:[LLTX_SCALER_pu_2_1]  
!
!
!

      IF(TIMEZERO) THEN
        STORF(NSTORF)=DELT/(0.015*(V_HV*V_HV/2.0)/(TWO_PI*60.0))
      ENDIF
      Yc  = STORF(NSTORF)
      Ycm = UN*Yc

      Hka_n_1 =  STORF(NSTORF+1)
      Hkb_n_1 =  STORF(NSTORF+2)
      Hkc_n_1 =  STORF(NSTORF+3)
      !
      Hma_n_1 =  STORF(NSTORF+4)
      Hmb_n_1 =  STORF(NSTORF+5)
      Hmc_n_1 =  STORF(NSTORF+6)
      !
      ! History current calclulation is done for one loss loss line segment
      Hma_n = 2*VDC(NT_10(1),SS(1))*Yc - Hka_n_1
      Hmb_n = 2*VDC(NT_10(2),SS(1))*Yc - Hkb_n_1
      Hmc_n = 2*VDC(NT_10(3),SS(1))*Yc - Hkc_n_1
      !
      Hka_n = 2*VDC(NT_9(1),SS(1))*Yc - Hma_n_1
      Hkb_n = 2*VDC(NT_9(2),SS(1))*Yc - Hmb_n_1
      Hkc_n = 2*VDC(NT_9(3),SS(1))*Yc - Hmc_n_1
      ! History current is saved for the next time step
      STORF(NSTORF+1)= Hka_n
      STORF(NSTORF+2)= Hkb_n
      STORF(NSTORF+3)= Hkc_n
      !
      STORF(NSTORF+4)= Hma_n
      STORF(NSTORF+5)= Hmb_n
      STORF(NSTORF+6)= Hmc_n

! Ensure main program records CCIN current injections at these nodes
      IF ( TIMEZERO ) THEN
         ENABCCIN(NT_10(1), SS(1)) = .TRUE.
         ENABCCIN(NT_10(2), SS(1)) = .TRUE.
         ENABCCIN(NT_10(3), SS(1)) = .TRUE.
!
         ENABCCIN(NT_9(1), SS(1)) = .TRUE.
         ENABCCIN(NT_9(2), SS(1)) = .TRUE.
         ENABCCIN(NT_9(3), SS(1)) = .TRUE.
      ENDIF

! If 'SCL' number of parallel loss less lines are assumed. To save computation time only one unit (e.g. wind turbine) is simulated at k th side.
!If side m has 'SCL' number of parallel lossless lines connected together. Total impedance is Zc/SCL and total current injection is Hm*SCAL
      CCIN(NT_10(1),SS(1)) = CCIN(NT_10(1),SS(1)) + Hka_n
      CCIN(NT_10(2),SS(1)) = CCIN(NT_10(2),SS(1)) + Hkb_n
      CCIN(NT_10(3),SS(1)) = CCIN(NT_10(3),SS(1)) + Hkc_n
!
      GGIN(NT_10(1),SS(1)) = GGIN(NT_10(1),SS(1)) + Yc
      GGIN(NT_10(2),SS(1)) = GGIN(NT_10(2),SS(1)) + Yc
      GGIN(NT_10(3),SS(1)) = GGIN(NT_10(3),SS(1)) + Yc
!
!m Side current injection Scaled up by SCL
      CCIN(NT_9(1),SS(1)) = CCIN(NT_9(1),SS(1)) + UN*Hma_n
      CCIN(NT_9(2),SS(1)) = CCIN(NT_9(2),SS(1)) + UN*Hmb_n
      CCIN(NT_9(3),SS(1)) = CCIN(NT_9(3),SS(1)) + UN*Hmc_n
!
!m Side Condutance Scaled down by SCL
      GGIN(NT_9(1),SS(1)) = GGIN(NT_9(1),SS(1)) + Ycm
      GGIN(NT_9(2),SS(1)) = GGIN(NT_9(2),SS(1)) + Ycm
      GGIN(NT_9(3),SS(1)) = GGIN(NT_9(3),SS(1)) + Ycm

      NSTORF = NSTORF + 7

! 360:[Filter_L_1_1_1_1]  
      CALL Filter_L_1_1_1_1Dyn(0, 0.000621, 700.0, 700.0, 1.332, 900.0, &
     &0.000835)


! 370:[var] Variable Input Slider 'Rload'
      Rload = CX(CXMAP(ICX+12))

! 380:[const] Real Constant 
      A = 0.468

! 390:[const] Real Constant 
      B = -3.5294

! 400:[const] Real Constant 
      RT_27 = 0.1

! 410:[const] Real Constant 
      K = 0.00876

! 420:[const] Real Constant 
      RT_28 = 3600.0

! 430:[const] Real Constant 
      E0 = 3.7348

! 480:[mult] Multiplier 
      Q = RT_27 * RT_28

! 500:[mult] Multiplier 
      RT_2 = Fmeas * RT_7

! 510:[mult] Multiplier 
      RT_25 = K * Q

! 520:[mult] Multiplier 
      RT_35 = E * RT_36

! 530:[mult] Multiplier 
      RT_37 = RT_35 * RT_38

! 540:[mult] Multiplier 
      RT_39 = RT_37 * Ibatt_A

! 550:[div] Divider 
      IF (ABS(RT_40) .LT. 1.0E-100) THEN
         IF (RT_40 .LT. 0.0)  THEN
            Pdc = -1.0E100 * RT_39
         ELSE
            Pdc =  1.0E100 * RT_39
         ENDIF
      ELSE
         Pdc = RT_39 / RT_40
      ENDIF

! 560:[PQ_control_10_1]  
      CALL PQ_control_10_1Dyn(UFqref, Wint, Wref, Qref, Pref, Qdq, Pdc, &
     &Pg, Ig, Qg, Vpcc, RT_1, VRMSF, RT_2, Qcontrol, RT_3, RT_4, 0.69, 3&
     &76.991)


! 570:[VF_Control_7_1]  
      CALL VF_Control_7_1Dyn(Vref_dq, Igrid, Vgrid, Iinv, Wint, UFqref, &
     &Wsys, Pdq, Qdq, Wref, 0.69, 1.6735, 376.991, 0.000835, 0.0007)


! 580:[mult] Multiplier 
      RT_31 = Pdq * RT_33

! 590:[mult] Multiplier 
      RT_29 = E * RT_30

! 600:[mult] Multiplier 
      RT_32 = RT_29 * RT_34

! 610:[div] Divider 
      IF (ABS(RT_32) .LT. 1.0E-100) THEN
         IF (RT_32 .LT. 0.0)  THEN
            Ibatt_A = -1.0E100 * RT_31
         ELSE
            Ibatt_A =  1.0E100 * RT_31
         ENDIF
      ELSE
         Ibatt_A = RT_31 / RT_32
      ENDIF

! 620:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = Ibatt_A
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      SOC_inv = EMTDC_XINT(0, 0, 0, RVD1_1, 1.0, 0.0, -1.0e+20, 1.0e+20,&
     & RVD2_2, RVD2_1)

! 630:[exp] Exponential Functions 
!  
      RT_21 = RTCF(NRTCF) * EXP(RTCF(NRTCF+1) * SOC_inv)
      NRTCF = NRTCF + 2

! 640:[sumjct] Summing/Differencing Junctions 
      RT_26 = + Q - SOC_inv

! 650:[div] Divider 
      IF (ABS(RT_26) .LT. 1.0E-100) THEN
         IF (RT_26 .LT. 0.0)  THEN
            RT_22 = -1.0E100 * RT_25
         ELSE
            RT_22 =  1.0E100 * RT_25
         ENDIF
      ELSE
         RT_22 = RT_25 / RT_26
      ENDIF

! 660:[sumjct] Summing/Differencing Junctions 
      RT_23 = + E0 + RT_21 - RT_22

! 670:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (0.0 .LE. 5.0) THEN
        E = LIMIT(0.0, 5.0, RT_23)
      ELSE
        E = RT_23
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1378171829,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 680:[sumjct] Summing/Differencing Junctions 
      RT_24 = - SOC_inv + Q

! 690:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (0.0 .LE. 3.0) THEN
        RT_41 = LIMIT(0.0, 3.0, Ibatt_A)
      ELSE
        RT_41 = Ibatt_A
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1795107278,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 700:[div] Divider 
      IF (ABS(RT_20) .LT. 1.0E-100) THEN
         IF (RT_20 .LT. 0.0)  THEN
            RT_19 = -1.0E100 * Wsys
         ELSE
            RT_19 =  1.0E100 * Wsys
         ENDIF
      ELSE
         RT_19 = Wsys / RT_20
      ENDIF

! 710:[gain] Gain Block 
!  Gain
      RT_18 = 0.001 * Vref_dq

! 720:[gain] Gain Block 
!  Gain
      RT_5 = 0.001 * Vref_dq

! 740:[pgb] Output Channel 'E'

      PGB(IPGB+1) = E

! 750:[pgb] Output Channel 'Ibatt_A'

      PGB(IPGB+2) = Ibatt_A

! 760:[div] Divider 
      IF (ABS(Q) .LT. 1.0E-100) THEN
         IF (Q .LT. 0.0)  THEN
            SOC = -1.0E100 * RT_24
         ELSE
            SOC =  1.0E100 * RT_24
         ENDIF
      ELSE
         SOC = RT_24 / Q
      ENDIF

! 770:[pgb] Output Channel 'Pdq'

      PGB(IPGB+3) = Pdq

! 780:[Converter_15_1]  
      CALL Converter_15_1Dyn(Vref_dq)


! 790:[datatap] Scalar/Array Tap 
      Va = Vref_dq(1)

! 800:[datatap] Scalar/Array Tap 
      Vb = Vref_dq(2)

! 810:[pgb] Output Channel 'RT_41'

      PGB(IPGB+4) = RT_41

! 820:[datatap] Scalar/Array Tap 
      Vc = Vref_dq(3)

! 830:[pgb] Output Channel 'Pdc'

      PGB(IPGB+5) = Pdc

! 840:[pgb] Output Channel 'Frequency_int'

      PGB(IPGB+6) = RT_19

! 860:[pgb] Output Channel 'VA_Ref'

      DO IVD1_1 = 1, 3
         PGB(IPGB+8+IVD1_1-1) = RT_18(IVD1_1)
      ENDDO

! 890:[pgb] Output Channel 'VA_Ref'

      DO IVD1_1 = 1, 3
         PGB(IPGB+15+IVD1_1-1) = RT_5(IVD1_1)
      ENDDO

! 900:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_14,RT_15,1.0,0.0,0.0,RVD2_1)
      RT_16 = RVD2_1(1)

! 920:[select] Two Input Selector 
      IF (NINT(RT_16) .EQ. RTCI(NRTCI)) THEN
         RT_17 = RT_13
      ELSE
         RT_17 = RT_12
      ENDIF
      NRTCI = NRTCI + 1
!

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = Pref
      STOF(ISTOF + 2) = Qref
      STOF(ISTOF + 3) = UN
      STOF(ISTOF + 4) = V_HV
      STOF(ISTOF + 8) = UFqref
      STOF(ISTOF + 9) = Wint
      STOF(ISTOF + 10) = Qdq
      STOF(ISTOF + 11) = Pdc
      STOF(ISTOF + 12) = RT_1
      STOF(ISTOF + 13) = RT_2
      STOF(ISTOF + 14) = RT_3
      STOF(ISTOF + 15) = RT_4
      STOF(ISTOF + 19) = Pmeas
      STOF(ISTOF + 20) = Qmeas
      STOF(ISTOF + 24) = Fmeas
      STOF(ISTOF + 25) = RT_6
      STOF(ISTOF + 26) = RT_7
      STOF(ISTOF + 27) = RT_8
      STOF(ISTOF + 28) = RT_9
      STOF(ISTOF + 29) = RT_10
      STOF(ISTOF + 30) = RT_11
      STOF(ISTOF + 31) = Qcontrol
      STOF(ISTOF + 32) = RT_12
      STOF(ISTOF + 33) = RT_13
      STOF(ISTOF + 34) = RT_14
      STOF(ISTOF + 35) = RT_15
      STOF(ISTOF + 36) = RT_16
      STOF(ISTOF + 37) = RT_17
      STOF(ISTOF + 38) = VRMS
      STOF(ISTOF + 39) = VRMSF
      STOF(ISTOF + 40) = L_Load
      STOF(ISTOF + 41) = R_Load
      STOF(ISTOF + 45) = Vpcc
      STOF(ISTOF + 46) = Pg
      STOF(ISTOF + 47) = Ig
      STOF(ISTOF + 48) = Qg
      STOF(ISTOF + 49) = Pref_
      STOF(ISTOF + 50) = Wref
      STOF(ISTOF + 51) = RT_19
      STOF(ISTOF + 52) = Wsys
      STOF(ISTOF + 53) = RT_20
      STOF(ISTOF + 57) = IRMS
      STOF(ISTOF + 58) = RT_21
      STOF(ISTOF + 59) = RT_22
      STOF(ISTOF + 60) = RT_23
      STOF(ISTOF + 61) = RT_24
      STOF(ISTOF + 62) = A
      STOF(ISTOF + 63) = B
      STOF(ISTOF + 64) = K
      STOF(ISTOF + 65) = E0
      STOF(ISTOF + 66) = RT_25
      STOF(ISTOF + 67) = RT_26
      STOF(ISTOF + 68) = SOC_inv
      STOF(ISTOF + 69) = RT_27
      STOF(ISTOF + 70) = RT_28
      STOF(ISTOF + 71) = SOC
      STOF(ISTOF + 72) = Q
      STOF(ISTOF + 73) = Rload
      STOF(ISTOF + 74) = RT_29
      STOF(ISTOF + 75) = RT_30
      STOF(ISTOF + 76) = RT_31
      STOF(ISTOF + 77) = RT_32
      STOF(ISTOF + 78) = Pdq
      STOF(ISTOF + 79) = RT_33
      STOF(ISTOF + 80) = RT_34
      STOF(ISTOF + 81) = RT_35
      STOF(ISTOF + 82) = E
      STOF(ISTOF + 83) = RT_36
      STOF(ISTOF + 84) = RT_37
      STOF(ISTOF + 85) = RT_38
      STOF(ISTOF + 86) = RT_39
      STOF(ISTOF + 87) = Ibatt_A
      STOF(ISTOF + 88) = RT_40
      STOF(ISTOF + 89) = RT_41
      STOF(ISTOF + 90) = Va
      STOF(ISTOF + 91) = Vb
      STOF(ISTOF + 92) = Vc
      STOF(ISTOF + 96) = Qref_
      STOF(ISTOF + 100) = PG_
      STOF(ISTOF + 101) = QG_
      STOF(ISTOF + 102) = Vrms_bus_pu

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 4 + IT_0) = Vref_dq(IT_0)
         STOF(ISTOF + 15 + IT_0) = Iinv(IT_0)
         STOF(ISTOF + 20 + IT_0) = RT_5(IT_0)
         STOF(ISTOF + 41 + IT_0) = RT_18(IT_0)
         STOF(ISTOF + 53 + IT_0) = Igrid(IT_0)
         STOF(ISTOF + 92 + IT_0) = Vgrid(IT_0)
         STOF(ISTOF + 96 + IT_0) = V33(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Converter_16_1Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
      REAL    RMS3PH        ! '3 Phase RMS Measurement'
      REAL    REALPOLE      ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
!     SUBR    Filter_L_1_1_1_1Out  ! 
!     SUBR    PQ_control_10_1Out  ! 
!     SUBR    VF_Control_7_1Out  ! 
!     SUBR    Converter_15_1Out  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_3(3), NT_8(3), NT_9(3)

! Control Signals
      REAL     RT_3, RT_4, Iinv(3), Pmeas, Qmeas
      REAL     Fmeas, RT_6, RT_7, RT_8, RT_9
      REAL     RT_10, RT_11, RT_12, RT_13, RT_15
      REAL     VRMS, VRMSF, RT_20, Igrid(3), IRMS
      REAL     A, B, K, E0, RT_27, RT_28, RT_30
      REAL     RT_33, RT_34, RT_36, RT_38, RT_40
      REAL     Vgrid(3), V33(3), PG_, QG_
      REAL     Vrms_bus_pu

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 26
      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 28
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 29

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_3     = STOF(ISTOF + 14)
      RT_4     = STOF(ISTOF + 15)
      Pmeas    = STOF(ISTOF + 19)
      Qmeas    = STOF(ISTOF + 20)
      Fmeas    = STOF(ISTOF + 24)
      RT_6     = STOF(ISTOF + 25)
      RT_7     = STOF(ISTOF + 26)
      RT_8     = STOF(ISTOF + 27)
      RT_9     = STOF(ISTOF + 28)
      RT_10    = STOF(ISTOF + 29)
      RT_11    = STOF(ISTOF + 30)
      RT_12    = STOF(ISTOF + 32)
      RT_13    = STOF(ISTOF + 33)
      RT_15    = STOF(ISTOF + 35)
      VRMS     = STOF(ISTOF + 38)
      VRMSF    = STOF(ISTOF + 39)
      RT_20    = STOF(ISTOF + 53)
      IRMS     = STOF(ISTOF + 57)
      A        = STOF(ISTOF + 62)
      B        = STOF(ISTOF + 63)
      K        = STOF(ISTOF + 64)
      E0       = STOF(ISTOF + 65)
      RT_27    = STOF(ISTOF + 69)
      RT_28    = STOF(ISTOF + 70)
      RT_30    = STOF(ISTOF + 75)
      RT_33    = STOF(ISTOF + 79)
      RT_34    = STOF(ISTOF + 80)
      RT_36    = STOF(ISTOF + 83)
      RT_38    = STOF(ISTOF + 85)
      RT_40    = STOF(ISTOF + 88)
      PG_      = STOF(ISTOF + 100)
      QG_      = STOF(ISTOF + 101)
      Vrms_bus_pu = STOF(ISTOF + 102)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Iinv(IT_0) = STOF(ISTOF + 15 + IT_0)
         Igrid(IT_0) = STOF(ISTOF + 53 + IT_0)
         Vgrid(IT_0) = STOF(ISTOF + 92 + IT_0)
         V33(IT_0) = STOF(ISTOF + 96 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_3(IT_0) = NODE(INODE + 9 + IT_0)
         NT_8(IT_0) = NODE(INODE + 17 + IT_0)
         NT_9(IT_0) = NODE(INODE + 20 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Converter_16_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 60:[const] Real Constant 

      RT_13 = 0.0

! 80:[const] Real Constant 

      RT_12 = 0.5

! 110:[const] Real Constant 

      RT_15 = 2.0

! 150:[emtconst] Commonly Used Constants (pi...) 
      RT_20 = TWO_PI

! 170:[const] Real Constant 

      RT_36 = 185.334

! 180:[const] Real Constant 

      RT_38 = 1000.0

! 190:[const] Real Constant 

      RT_40 = 2000000.0

! 200:[const] Real Constant 

      RT_4 = 20.0

! 210:[const] Real Constant 

      RT_33 = 2000000.0

! 220:[emtconst] Commonly Used Constants (pi...) 
      RT_7 = TWO_PI

! 230:[const] Real Constant 

      RT_30 = 185.334

! 240:[const] Real Constant 

      RT_34 = 1000.0

! 270:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Iinv(1) = ( CBR((IBRCH(1)+1), SS(1)))
      Iinv(2) = ( CBR((IBRCH(1)+2), SS(1)))
      Iinv(3) = ( CBR((IBRCH(1)+3), SS(1)))
      Vgrid(1) = EMTDC_VVDC(SS(1), NT_3(1), 0)
      Vgrid(2) = EMTDC_VVDC(SS(1), NT_3(2), 0)
      Vgrid(3) = EMTDC_VVDC(SS(1), NT_3(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (&
     &IBRCH(1)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1617344086,RVD1_1,"Pd")
      Pmeas = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (&
     &IBRCH(1)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1617344086,RVD1_1,"Qd")
      Qmeas = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_3(1), NT_3(2), NT_3(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1617344086,RVD1_1,"Vd")
      VRMS = RVD1_1
      RVD1_1 = RMS3PH(( CBR((IBRCH(1)+1), SS(1))),( CBR((IBRCH(1)+2), SS&
     &(1))),( CBR((IBRCH(1)+3), SS(1))))
      RVD1_1 = REALPOLE(0,1,0,RTCF(IVD1_1+4),RTCF(IVD1_1+2),RVD1_1,0.0,0&
     &.0,RTCF(IVD1_1+2))
      IRMS = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1617344086,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1617344086,1,"hide2")
      ENDIF

! 290:[ammeter] Current Meter 'Igrid'
      Igrid(1) = ( CBR((IBRCH(1)+4), SS(1)))
      Igrid(2) = ( CBR((IBRCH(1)+5), SS(1)))
      Igrid(3) = ( CBR((IBRCH(1)+6), SS(1)))

! 300:[const] Real Constant 

      RT_3 = 5.0

! 320:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      V33(1) = EMTDC_VVDC(SS(1), NT_8(1), 0)
      V33(2) = EMTDC_VVDC(SS(1), NT_8(2), 0)
      V33(3) = EMTDC_VVDC(SS(1), NT_8(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,904266972,RVD1_1,"Pd")
      PG_ = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,904266972,RVD1_1,"Qd")
      QG_ = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_8(1),NT_8(2),NT_8(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,904266972,RVD1_1,"Vd")
      Vrms_bus_pu = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,904266972,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,904266972,1,"hide2")
      ENDIF

! 350:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,36308225,RVD1_1,"Pd")
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (&
     &IBRCH(1)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,36308225,RVD1_1,"Qd")
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS(1), NT_9(1), NT_9(2), NT_9(3),&
     & RTCF(IVD1_1+2))
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,36308225,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,36308225,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,36308225,1,"hide2")
      ENDIF

! 360:[Filter_L_1_1_1_1]  
      CALL Filter_L_1_1_1_1Out()


! 380:[const] Real Constant 

      A = 0.468

! 390:[const] Real Constant 

      B = -3.5294

! 400:[const] Real Constant 

      RT_27 = 0.1

! 410:[const] Real Constant 

      K = 0.00876

! 420:[const] Real Constant 

      RT_28 = 3600.0

! 430:[const] Real Constant 

      E0 = 3.7348

! 440:[realpole] Real Pole 
!  Real_Pole
      VRMSF = REALPOLE(0,1,0,1.0,0.02,VRMS,0.0,-1.0E20,1.0E20)

! 450:[datatap] Scalar/Array Tap 
      RT_8 = Vgrid(1)

! 460:[datatap] Scalar/Array Tap 
      RT_9 = Vgrid(2)

! 470:[datatap] Scalar/Array Tap 
      RT_10 = Vgrid(3)

! 490:[tvekta] Phase-Locked Loop 
      RVD1_1 = 0.0*PI_BY180
      CALL COMPONENT_ID(ICALL_NO,1027813559)
      CALL TVEKA1_EXE(RT_8,RT_9,RT_10,50.0,900.0,RVD1_1,0.05,1.2,0.8,RT_&
     &11,RVD1_3,RVD1_2)
      RT_11 = RT_11*BY180_PI
      Fmeas = RVD1_2
!

! 560:[PQ_control_10_1]  
      CALL PQ_control_10_1Out()


! 570:[VF_Control_7_1]  
      CALL VF_Control_7_1Out()


! 730:[realpole] Real Pole 
!  Real_Pole
      RT_6 = REALPOLE(0,1,0,1.0,0.02,Fmeas,0.0,-1.0E20,1.0E20)

! 780:[Converter_15_1]  
      CALL Converter_15_1Out()


! 850:[pgb] Output Channel 'Pmeas'

      PGB(IPGB+7) = Pmeas

! 870:[pgb] Output Channel 'Qmeas'

      PGB(IPGB+11) = Qmeas

! 880:[pgb] Output Channel 'Igrid'

      DO IVD1_1 = 1, 3
         PGB(IPGB+12+IVD1_1-1) = Igrid(IVD1_1)
      ENDDO

! 910:[pgb] Output Channel 'Irms'

      PGB(IPGB+18) = IRMS

! 930:[pgb] Output Channel 'I_inverter'

      DO IVD1_1 = 1, 3
         PGB(IPGB+19+IVD1_1-1) = Iinv(IVD1_1)
      ENDDO

! 940:[pgb] Output Channel 'Fmeas'

      PGB(IPGB+22) = RT_6

! 950:[pgb] Output Channel 'Vgrid'

      DO IVD1_1 = 1, 3
         PGB(IPGB+23+IVD1_1-1) = Vgrid(IVD1_1)
      ENDDO

! 960:[pgb] Output Channel 'V_rms'

      PGB(IPGB+26) = VRMSF

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 14) = RT_3
      STOF(ISTOF + 15) = RT_4
      STOF(ISTOF + 19) = Pmeas
      STOF(ISTOF + 20) = Qmeas
      STOF(ISTOF + 24) = Fmeas
      STOF(ISTOF + 25) = RT_6
      STOF(ISTOF + 26) = RT_7
      STOF(ISTOF + 27) = RT_8
      STOF(ISTOF + 28) = RT_9
      STOF(ISTOF + 29) = RT_10
      STOF(ISTOF + 30) = RT_11
      STOF(ISTOF + 32) = RT_12
      STOF(ISTOF + 33) = RT_13
      STOF(ISTOF + 35) = RT_15
      STOF(ISTOF + 38) = VRMS
      STOF(ISTOF + 39) = VRMSF
      STOF(ISTOF + 53) = RT_20
      STOF(ISTOF + 57) = IRMS
      STOF(ISTOF + 62) = A
      STOF(ISTOF + 63) = B
      STOF(ISTOF + 64) = K
      STOF(ISTOF + 65) = E0
      STOF(ISTOF + 69) = RT_27
      STOF(ISTOF + 70) = RT_28
      STOF(ISTOF + 75) = RT_30
      STOF(ISTOF + 79) = RT_33
      STOF(ISTOF + 80) = RT_34
      STOF(ISTOF + 83) = RT_36
      STOF(ISTOF + 85) = RT_38
      STOF(ISTOF + 88) = RT_40
      STOF(ISTOF + 100) = PG_
      STOF(ISTOF + 101) = QG_
      STOF(ISTOF + 102) = Vrms_bus_pu

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 15 + IT_0) = Iinv(IT_0)
         STOF(ISTOF + 53 + IT_0) = Igrid(IT_0)
         STOF(ISTOF + 92 + IT_0) = Vgrid(IT_0)
         STOF(ISTOF + 96 + IT_0) = V33(IT_0)
      END DO


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Converter_16_1Dyn_Begin(UN, V_HV)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Filter_L_1_1_1_1Dyn_Begin  ! 
!     SUBR    PQ_control_10_1Dyn_Begin  ! 
!     SUBR    VF_Control_7_1Dyn_Begin  ! 
!     SUBR    Converter_15_1Dyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: UN, V_HV

! Electrical Node Indices

! Control Signals
      REAL     RT_3, RT_4, RT_7, RT_12, RT_13
      REAL     RT_15, RT_20, A, B, K, E0, RT_27
      REAL     RT_28, RT_30, RT_33, RT_34, RT_36
      REAL     RT_38, RT_40

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ICX                                 ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ICX       = NCX
      NCX       = NCX + 12
      INODE     = NNODE + 2
      NNODE     = NNODE + 28
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 29

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[var] Variable Input Slider 'KPg'

! 30:[var] Variable Input Slider 'Pref'

! 40:[var] Variable Input Slider 'KQg'

! 50:[var] Variable Input Slider 'Qref'

! 60:[const] Real Constant 
      RT_13 = 0.0

! 70:[var] Variable Input Slider 'KIg'

! 80:[const] Real Constant 
      RT_12 = 0.5

! 90:[var] Variable Input Slider 'Wref'

! 100:[time-sig] Output of Simulation Time 

! 110:[const] Real Constant 
      RT_15 = 2.0

! 120:[var] Variable Input Slider 'Vpcc'

! 130:[var_switch] Two State Switch 'Qcontrol'

! 140:[var] Variable Input Slider 'R_Load'

! 150:[emtconst] Commonly Used Constants (pi...) 
      RT_20 = TWO_PI

! 160:[var] Variable Input Slider 'L_Load'

! 170:[const] Real Constant 
      RT_36 = 185.334

! 180:[const] Real Constant 
      RT_38 = 1000.0

! 190:[const] Real Constant 
      RT_40 = 2000000.0

! 200:[const] Real Constant 
      RT_4 = 20.0

! 210:[const] Real Constant 
      RT_33 = 2000000.0

! 220:[emtconst] Commonly Used Constants (pi...) 
      RT_7 = TWO_PI

! 230:[const] Real Constant 
      RT_30 = 185.334

! 240:[const] Real Constant 
      RT_34 = 1000.0

! 300:[const] Real Constant 
      RT_3 = 5.0

! 310:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,879123097)
      RVD1_1 = ONE_3RD*2.0
      RVD1_2 = V_HV*SQRT_1BY3
      RVD1_3 = 0.69*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 1),1,RVD1_1,60.0,0.035,0.0,RVD1_2,RVD1_3,&
     &0.4)
      CALL E_TF2W_CFG((IXFMR + 2),1,RVD1_1,60.0,0.035,0.0,RVD1_2,RVD1_3,&
     &0.4)
      CALL E_TF2W_CFG((IXFMR + 3),1,RVD1_1,60.0,0.035,0.0,RVD1_2,RVD1_3,&
     &0.4)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(2.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+13),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+14),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+15),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+16),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+17),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+18),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH(1)+19), (IBRCH(1)+20), (IBRCH(1)+21), (IB&
     &RCH(1)+22), (IBRCH(1)+23), (IBRCH(1)+24),0,0,0,0,0,0,SS(1),RVD1_1,&
     &0.2,1.17,60.0,0.0,0.4,0.0,0.035,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,&
     &0.0,0.0)

! 330:[var_switch] Two State Switch 'Constant VF control'

! 340:[LLTX_SCALER_pu_2_1]  

! 360:[Filter_L_1_1_1_1]  
      CALL Filter_L_1_1_1_1Dyn_Begin(0.000621, 700.0, 700.0, 1.332)


! 370:[var] Variable Input Slider 'Rload'

! 380:[const] Real Constant 
      A = 0.468

! 390:[const] Real Constant 
      B = -3.5294

! 400:[const] Real Constant 
      RT_27 = 0.1

! 410:[const] Real Constant 
      K = 0.00876

! 420:[const] Real Constant 
      RT_28 = 3600.0

! 430:[const] Real Constant 
      E0 = 3.7348

! 480:[mult] Multiplier 

! 500:[mult] Multiplier 

! 510:[mult] Multiplier 

! 520:[mult] Multiplier 

! 530:[mult] Multiplier 

! 540:[mult] Multiplier 

! 550:[div] Divider 

! 560:[PQ_control_10_1]  
      CALL PQ_control_10_1Dyn_Begin()


! 570:[VF_Control_7_1]  
      CALL VF_Control_7_1Dyn_Begin()


! 580:[mult] Multiplier 

! 590:[mult] Multiplier 

! 600:[mult] Multiplier 

! 610:[div] Divider 

! 620:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 630:[exp] Exponential Functions 
      RTCF(NRTCF)   = A
      RTCF(NRTCF+1) = B
      NRTCF = NRTCF + 2

! 640:[sumjct] Summing/Differencing Junctions 

! 650:[div] Divider 

! 660:[sumjct] Summing/Differencing Junctions 

! 670:[hardlimit] Hard Limiter 

! 680:[sumjct] Summing/Differencing Junctions 

! 690:[hardlimit] Hard Limiter 

! 700:[div] Divider 

! 710:[gain] Gain Block 

! 720:[gain] Gain Block 

! 740:[pgb] Output Channel 'E'

! 750:[pgb] Output Channel 'Ibatt_A'

! 760:[div] Divider 

! 770:[pgb] Output Channel 'Pdq'

! 780:[Converter_15_1]  
      CALL Converter_15_1Dyn_Begin()


! 790:[datatap] Scalar/Array Tap 

! 800:[datatap] Scalar/Array Tap 

! 810:[pgb] Output Channel 'RT_41'

! 820:[datatap] Scalar/Array Tap 

! 830:[pgb] Output Channel 'Pdc'

! 840:[pgb] Output Channel 'Frequency_int'

! 860:[pgb] Output Channel 'VA_Ref'

! 890:[pgb] Output Channel 'VA_Ref'

! 900:[compar] Two Input Comparator 

! 920:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

      RETURN
      END

!=======================================================================

      SUBROUTINE Converter_16_1Out_Begin(UN, V_HV)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Filter_L_1_1_1_1Out_Begin  ! 
!     SUBR    PQ_control_10_1Out_Begin  ! 
!     SUBR    VF_Control_7_1Out_Begin  ! 
!     SUBR    Converter_15_1Out_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: UN, V_HV

! Electrical Node Indices
      INTEGER  NT_3(3), NT_8(3)

! Control Signals
      REAL     RT_3, RT_4, RT_7, RT_12, RT_13
      REAL     RT_15, RT_20, A, B, K, E0, RT_27
      REAL     RT_28, RT_30, RT_33, RT_34, RT_36
      REAL     RT_38, RT_40

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 28
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 29

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_3(IT_0) = NODE(INODE + 9 + IT_0)
         NT_8(IT_0) = NODE(INODE + 17 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 60:[const] Real Constant 
      RT_13 = 0.0

! 80:[const] Real Constant 
      RT_12 = 0.5

! 110:[const] Real Constant 
      RT_15 = 2.0

! 150:[emtconst] Commonly Used Constants (pi...) 
      RT_20 = TWO_PI

! 170:[const] Real Constant 
      RT_36 = 185.334

! 180:[const] Real Constant 
      RT_38 = 1000.0

! 190:[const] Real Constant 
      RT_40 = 2000000.0

! 200:[const] Real Constant 
      RT_4 = 20.0

! 210:[const] Real Constant 
      RT_33 = 2000000.0

! 220:[emtconst] Commonly Used Constants (pi...) 
      RT_7 = TWO_PI

! 230:[const] Real Constant 
      RT_30 = 185.334

! 240:[const] Real Constant 
      RT_34 = 1000.0

! 270:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(2.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(2.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(0.69) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(0.69)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.002
      IF (ABS(1.6735) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.6735)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 300:[const] Real Constant 
      RT_3 = 5.0

! 320:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(2.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(2.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(V_HV) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(V_HV)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 350:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(100.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(100.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(V_HV) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(V_HV)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 360:[Filter_L_1_1_1_1]  
      CALL Filter_L_1_1_1_1Out_Begin(0.000621, 700.0, 700.0, 1.332)


! 380:[const] Real Constant 
      A = 0.468

! 390:[const] Real Constant 
      B = -3.5294

! 400:[const] Real Constant 
      RT_27 = 0.1

! 410:[const] Real Constant 
      K = 0.00876

! 420:[const] Real Constant 
      RT_28 = 3600.0

! 430:[const] Real Constant 
      E0 = 3.7348

! 440:[realpole] Real Pole 

! 450:[datatap] Scalar/Array Tap 

! 460:[datatap] Scalar/Array Tap 

! 470:[datatap] Scalar/Array Tap 

! 490:[tvekta] Phase-Locked Loop 
      CALL TVEKA1_CFG(1.0,60.0)

! 560:[PQ_control_10_1]  
      CALL PQ_control_10_1Out_Begin()


! 570:[VF_Control_7_1]  
      CALL VF_Control_7_1Out_Begin()


! 730:[realpole] Real Pole 

! 780:[Converter_15_1]  
      CALL Converter_15_1Out_Begin()


! 850:[pgb] Output Channel 'Pmeas'

! 870:[pgb] Output Channel 'Qmeas'

! 880:[pgb] Output Channel 'Igrid'

! 910:[pgb] Output Channel 'Irms'

! 930:[pgb] Output Channel 'I_inverter'

! 940:[pgb] Output Channel 'Fmeas'

! 950:[pgb] Output Channel 'Vgrid'

! 960:[pgb] Output Channel 'V_rms'

      RETURN
      END

